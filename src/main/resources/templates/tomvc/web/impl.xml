<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>Work/qitoon/app/recruit/implement/src/main/java/${packageName}/${moduleName}/impl/${subModuleName}</filePath>
	<fileName>${ClassName}ServiceImpl.java</fileName>
	<content><![CDATA[
/**
 * 
 */
package ${packageName}.${moduleName}.impl<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import ${packageName}.core.mybaits.Page;

import ${packageName}.${moduleName}.bean.${ClassName};
import ${packageName}.${moduleName}.dao.${ClassName}Mapper;
import ${packageName}.${moduleName}.service.${ClassName}Service;
import ${packageName}.core.exception.BusinessException;
/**
 * ${functionName} impl实现
 * @ClassName: ${ClassName}ServiceImpl
 * @author ${functionAuthor}
 * @date ${functionVersion}
 * Copyright: Copyright (c) 2016 
 * Company:ToB中心
 */
public class ${ClassName}ServiceImpl implements ${ClassName}Service{
	
	private static final Logger log = Logger.getLogger(${ClassName}ServiceImpl.class);
	@Autowired
    ${ClassName}Mapper ${className}Mapper;

	<#list interfaces as m>

	<#if m.selectType == "A">
	public int ${m.name}(${ClassName} entity) {
	 try{
		return ${className}Mapper.insert(entity);
		}
		catch (Exception ex) {
			log.error(ex.getMessage(),ex);
			throw new BusinessException(ex.getMessage(),ex,Constants.FAILURE);
		}
	}
	</#if>
	<#elseif m.selectType == "D">
	public int ${m.name}(String id) {
		try
		{
		return ${className}Mapper.delete(id);
		 }
		catch (Exception ex) {
			log.error(ex.getMessage(),ex);
			throw new BusinessException(ex.getMessage(),ex,Constants.FAILURE);
		}
	}
	</#elseif>
	<#elseif  m.selectType == "S">
	public ${ClassName} ${m.name}(Long id) {
	try{
		return ${className}Mapper.get(id);
		}
		catch (Exception ex) {
			log.error(ex.getMessage(),ex);
			throw new BusinessException(ex.getMessage(),ex,Constants.FAILURE);
		}
	}
	</#elseif>
	<#elseif m.selectType == "U">

	public int ${m.name}(${ClassName} entity) {
		try{
		return ${className}Mapper.update(entity);
		   }
		catch (Exception ex) {
			log.error(ex.getMessage(),ex);
			throw new BusinessException(ex.getMessage(),ex,Constants.FAILURE);
		}
	}
	</#elseif>
	<#elseif m.selectType == "L">
	public List<${ClassName}> ${m.name}(Page page) {
	  try
		{
		return ${className}Mapper.${m.name}(page);
		   }
		catch (Exception ex) {
			log.error(ex.getMessage(),ex);
			throw new BusinessException(ex.getMessage(),ex,Constants.FAILURE);
		}
	}
	</#elseif>
</#list>
}]]>
	</content>
</template>